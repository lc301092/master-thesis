<!doctype html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<title>Game 1 </title>
	<!-- <script src="//cdn.jsdelivr.net/npm/phaser@3.11.0/dist/phaser.js"></script> -->
	<style type="text/css">
		body {
			margin: 0;
		}

	</style>
</head>

<body>

	<script type="text/javascript">
		
		let cursors;
		let scene;
		let player;
		let playerBody;
		let speed = 1;

		let keys;
		let singlePress = Phaser.Input.Keyboard.JustDown;
		let zeroVector = Phaser.Math.Vector2.ZERO;
		let up = new Phaser.Math.Vector2(0, -1);
		let down = new Phaser.Math.Vector2(0, 1);
		let right = new Phaser.Math.Vector2(1, 0);
		let left = new Phaser.Math.Vector2(-1, 0);
		let interact;


		let playerAnimation;

		function preload() {
			this.load.image('map', 'assets/map2.png');
			this.load.spritesheet('player', 'assets/playable_charaters.png', {
				frameWidth: 48,
				frameHeight: 64
			});
			this.load.spritesheet('portal', 'assets/portal.png', {
				frameWidth: 250,
				frameHeight: 592
			});
			
		}

		// ### create ### 


		function create() {
			scene = this;
			scene.cameras.main.setBounds(0, 0, 1920 * 2, 1080 * 2);
			scene.physics.world.setBounds(0, 0, 1920 * 2, 1080 * 2);

			let map = scene.add.image(0, 0, 'map').setOrigin(0);
			scene.player = scene.physics.add.sprite(400, 300, 'player');
			player = scene.player;
			playerAnimation = scene.player.anims;

			scene.player.setCollideWorldBounds(true);

			scene.cameras.main.startFollow(scene.player, true, 0.05, 0.05);

			animationSetup(scene);


			//let portals = scene.physics.add.staticGroup()
			//let portal = scene.add.sprite(780, 820, 'portal').play('idle').setScale(0.25);
			//let portal = portals.create(780, 820, 'portal').play('idle').setScale(0.25);
			let portal2 = this.physics.add.staticSprite(200,200,'portal').play('idle').setScale(0.25).refreshBody();

	

			portal2.setCollideWorldBounds(true);
			this.physics.add.collider(player, portal2, null, null, this);

			keys = scene.input.keyboard.addKeys({
				up: 'W',
				down: 'S',
				left: 'A',
				right: 'D',
				interact: 'E'

			});
			//keys.interact.emitOnRepeat = true;

	
		}

		function update() {

			playerControl();

		
		}

		function playerControl() {

			// this will be the velocity when no keys are pressed
			player.setVelocity(0, 0);
			
			
			
			if (keys.up.isDown) {
				player.setVelocityY(-150);
				playerAnimation.play('up', true);
			} else if (keys.down.isDown) {
				player.setVelocityY(150);
				playerAnimation.play('down', true);
			}
			
			else if (keys.left.isDown) {
				player.setVelocityX(-150);
				playerAnimation.play('left', true);
				
			} 
			else if (keys.right.isDown) {
				
				player.setVelocityX(150);
				console.log(player);
				playerAnimation.play('right', true);
			}
			else {
				playerAnimation.play('turn', true);
			} 
			
			if (singlePress(keys.interact)){
				console.log(player);
				//console.log(keys.interact);
				//checkColliders()
			} 
			//if(player.velocity == 0) 
			
		}
		


//#region animation
		function animationSetup(scene) {
			scene.anims.create({
				key: 'idle',
				frames: scene.anims.generateFrameNumbers('portal', {
					start: 0,
					end: 3
				}),
				frameRate: 8,
				repeat: -1
			});

			scene.anims.create({
				key: 'left',
				frames: scene.anims.generateFrameNumbers('player', {
					start: 15,
					end: 17
				}),
				frameRate: 10,
				repeat: -1
			});

			scene.anims.create({
				key: 'right',
				frames: scene.anims.generateFrameNumbers('player', {
					start: 27,
					end: 29
				}),
				frameRate: 10,
				repeat: -1
			});
			scene.anims.create({
				key: 'down',
				frames: scene.anims.generateFrameNumbers('player', {
					start: 3,
					end: 5
				}),
				frameRate: 10,
				repeat: -1
			});
			scene.anims.create({
				key: 'up',
				frames: scene.anims.generateFrameNumbers('player', {
					start: 39,
					end: 41
				}),
				frameRate: 10,
				repeat: -1
			});
			scene.anims.create({
				key: 'turn',
				frames: [{
					key: 'player',
					frame: 4
				}],
				frameRate: 10,
				repeat: -1
			});
		}
//#endregion animation
	
const config = {
			type: Phaser.AUTO,
			width: 1600,
			height: 1200,
    		physics: {
        		default: 'arcade',
        		arcade: {
            		debug: true
        		}
    		},
			scene: {
				preload: preload,
				create: create,
				update: update
			}
		};

		const game = new Phaser.Game(config);
	</script>

</body>

</html>
